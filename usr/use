#!/home/rik/.ghcup/bin/runhaskell

---
-- $ usr/use
---

import Control.Exception (catch)
import Data.List (isSuffixOf)
import System.Exiter (exit)
import System.Filer (FileCont, FisoMode, FisoType (None, {-Null,-} PFold, PFile, VFold, VFile), LinkCont, {-FilerException,-} version, {-basename, dirname,-} fisoType, fisoMode, {-isFisoMode,-} setFisoMode, existAsFiles, offsetFilePaths, createFold, deleteFold, createFile, deleteFile, recreateFile, fileCont, updateFile, createLink, deleteLink, recreateLink, linkCont)

checkFisoMode :: FilePath -> FisoMode -> IO ()
checkFisoMode filePath fisoMode0 =
    fisoMode filePath >>= \fisoMode1 -> if fisoMode0 == fisoMode1 then return () else exit 1 ("checkFisoMode: " ++ fisoMode0 ++ " /~ " ++ filePath)

checkFisoType :: FilePath -> FisoType -> IO ()
checkFisoType filePath fisoType0 =
    fisoType filePath >>= \fisoType1 -> if fisoType0 == fisoType1 then return () else exit 2 ("checkFisoType: " ++ show fisoType0 ++ " /~ " ++ filePath)

checkFileCont :: FilePath -> FileCont -> IO ()
checkFileCont filePath fileCont0 =
    fileCont filePath >>= \fileCont1 -> if fileCont0 == fileCont1 then return () else exit 3 ("checkFileCont: " ++ show fileCont0 ++ " /~ " ++ filePath)

checkLinkCont :: FilePath -> LinkCont -> IO ()
checkLinkCont filePath linkCont0 =
    linkCont filePath >>= \linkCont1 -> if isSuffixOf linkCont0 linkCont1 then return () else exit 4 ("checkLinkCont: " ++ show linkCont0 ++ " /~ " ++ filePath)

checkFisoModes :: IO ()
checkFisoModes =
    setFisoMode ".directory" "600" >> checkFisoMode ".directory" "600"
    >> setFisoMode ".directory" "644" >> checkFisoMode ".directory" "644"
    >> setFisoMode ".directory" "600" >> checkFisoMode ".directory" "600"

checkFisoTypes :: IO ()
checkFisoTypes =
    deleteFold "tmp" >> checkFisoType "tmp" None
    >> deleteFold "tmp" >> checkFisoType "tmp" None
    >> createFold "tmp" >> checkFisoType "tmp" PFold
    >> createFold "tmp" >> checkFisoType "tmp" PFold
    >> deleteFold "tmp" >> checkFisoType "tmp" None

checkFold :: IO ()
checkFold =
    deleteFold "tmp" >> checkFisoType "tmp" None
    >> deleteFold "tmp" >> checkFisoType "tmp" None
    >> createFold "tmp" >> checkFisoType "tmp" PFold >> checkFisoMode "tmp" "700"
    >> createFold "tmp" >> checkFisoType "tmp" PFold >> checkFisoMode "tmp" "700"
    >> deleteFold "tmp" >> checkFisoType "tmp" None

checkFile :: IO ()
checkFile =
    deleteFile "tmp/file" >> checkFisoType "tmp/file" None
    >> deleteFile "tmp/file" >> checkFisoType "tmp/file" None
    >> createFile "tmp/file" "content" >> checkFisoType "tmp/file" PFile >> checkFisoMode "tmp/file" "600" >> checkFileCont "tmp/file" "content"
    >> recreateFile "tmp/file" "⚠\nnontent" >> checkFisoType "tmp/file" PFile >> checkFisoMode "tmp/file" "600" >> checkFileCont "tmp/file" "⚠\nnontent"
    >> updateFile "tmp/file" "content" >> checkFisoType "tmp/file" PFile >> checkFisoMode "tmp/file" "600" >> checkFileCont "tmp/file" "content"
    >> updateFile "tmp/file" "nontent" >> checkFisoType "tmp/file" PFile >> checkFisoMode "tmp/file" "600" >> checkFileCont "tmp/file" "content"
    >> deleteFile "tmp/file" >> checkFisoType "tmp/file" None

checkLink :: IO ()
checkLink =
    deleteLink "tmp/link" >> checkFisoType "tmp/link" None
    >> deleteLink "tmp/link" >> checkFisoType "tmp/link" None
    >> createLink "tmp/link" ".directory" >> checkFisoType "tmp/link" VFile >> checkFisoMode "tmp/link" "600" >> checkLinkCont "tmp/link" ".directory"
    >> recreateLink "tmp/link" "src" >> checkFisoType "tmp/link" VFold >> checkFisoMode "tmp/link" "700" >> checkLinkCont "tmp/link" "src"
    >> deleteLink "tmp/link" >> checkFisoType "tmp/link" None

checkFilesExist :: IO ()
checkFilesExist =
    existAsFiles ["usr/use"] "" "" >>= \b -> if b then return () else exit 5 "checkFilesExist: not file: usr/use"
    >> existAsFiles ["usr/useX"] "" "" >>= \b -> if b then exit 6 "checkFilesExist: file: usr/useX" else return ()

checkOffsetFilePaths :: IO ()
checkOffsetFilePaths =
    offsetFilePaths ["usr/use"] "" "" >>= \fps -> if fps == ["usr/use"] then return () else exit 7 "checkOffsetFilePaths: wrong fps"
    >> offsetFilePaths ["usr/useX"] "" "" >>= \fps -> if fps == [] then return () else exit 8 "checkOffsetFilePaths: wrong fps"

checkVersion :: IO ()
checkVersion = let expected = "0.3.2" in if expected == version then return () else exit 9 ("checkVersion: " ++ expected ++ " /= " ++ version)

main :: IO ()
main =
    checkFisoModes
    >> checkFisoTypes
    >> checkFold
    >> checkFile
    >> checkLink
    >> checkFilesExist
    >> checkOffsetFilePaths
    >> checkVersion
